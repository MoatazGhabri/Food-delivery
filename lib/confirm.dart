import 'dart:io';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:fseg/LoginPge.dart';
import 'AccountPage.dart';
import 'CartItem.dart';
import 'Menu.dart';

void main() {
  runApp(const FigmaToCodeApp());
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  final String? email;
  final String? name;
  final String? address;
  final String? number;
  const FigmaToCodeApp({Key? key,this.email, this.name, this.address, this.number}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        body: AndroidSmall4(cartItems: cart,email: email, name: name , address: address, number: number), // Pass cartItems to the confirm page
      ),
    );
  }
}

class AndroidSmall4 extends StatefulWidget {
  String? email; // Declare userEmail parameter
  String? name;
  String? address;
  String? number;
  final List<CartItem> cartItems;

   AndroidSmall4({required this.cartItems, this.email, this.name , this.address , this.number});

  @override
  _AndroidSmall4State createState() => _AndroidSmall4State();
}

class _AndroidSmall4State extends State<AndroidSmall4> {
  late List<CartItem> cartItems;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final DatabaseReference _userRef = FirebaseDatabase.instance.reference().child('users');

  @override
  void initState() {
    super.initState();
    cartItems = widget.cartItems;
    loggedin();
  }

  void removeItem(int index) {
    setState(() {
      cartItems.removeAt(index);
    });
  }

  void confirmOrder() {
    if (cartItems.isEmpty) {
      // Display toast message indicating that the cart is empty
      Fluttertoast.showToast(
        msg: "Your cart is empty. Please add items before checking out.",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return; // Exit the method
    }

    // Prepare data to be stored in the database
    Map<String, dynamic> orderData = {
      'userName': widget.name,
      'userNumber': widget.number,
      'userAddress': widget.address,
      'totalPrice': calculateTotalPrice(),
      'items': groupItemsByName(), // Call the method to group items by name
    };

    // Get a reference to the database
    DatabaseReference databaseReference = FirebaseDatabase.instance.reference();

    // Push the data to the database
    databaseReference.child('orders').push().set(orderData).then((value) {
      // Order saved successfully
      // Display toast message
      Fluttertoast.showToast(
        msg: "Order placed successfully!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );

      // Clear the cartItems list
      setState(() {
        cartItems.clear();
      });
    }).catchError((error) {
      Fluttertoast.showToast(
        msg: "'Failed to place order: $error'",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    });
  }

// Method to group items by name and collect their quantities
  List<Map<String, dynamic>> groupItemsByName() {
    Map<String, int> itemQuantities = {};

    for (var item in cartItems) {
      if (itemQuantities.containsKey(item.name)) {
        // If the item name already exists in the map, increment its quantity
        itemQuantities[item.name] = (itemQuantities[item.name] ?? 0) + item.quantity;
      } else {
        // If the item name doesn't exist, add it to the map with its quantity
        itemQuantities[item.name] = item.quantity;
      }
    }

    // Convert the map to a list of maps with name and quantity
    List<Map<String, dynamic>> groupedItems = [];
    itemQuantities.forEach((itemName, quantity) {
      groupedItems.add({'name': itemName, 'quantity': quantity});
    });

    return groupedItems;
  }
  // Get a reference to the database

  double calculateTotalPrice() {
    double totalPrice = 0;
    for (int i = 0; i < cartItems.length; i++) {
      totalPrice += cartItems[i].price * cartItems[i].quantity;
    }
    return totalPrice;
  }
  Future<void> loggedin() async {
    // Check if user is logged in
    User? user = _auth.currentUser;
    if (user != null) {
      // If user is logged in, retrieve user data
      String uid = user.uid;
      DatabaseEvent snapshot = (await _userRef.child(uid).once()) as DatabaseEvent; // Use DataSnapshot instead of DatabaseEvent
      if (snapshot.snapshot.value != null) {
        Map<dynamic, dynamic> userData = snapshot.snapshot.value as Map<dynamic, dynamic>; // Cast value to Map<dynamic, dynamic>
        // Set user data to the UI elements
        setState(() {
          widget.email = userData['email'];
          widget.name = userData['name'];
          widget.number = userData['number'];
          widget.address = userData['address'];
        });
      }
    }
  }
  Future<void> _signOut() async {
    try {
      await _auth.signOut(); // Sign out the current user
      // Redirect to the login page or any other page you prefer
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => Menu()), // Replace LoginPge with your login page
            (route) => false,
      );
    } catch (e) {
      print("Error signing out: $e");
    }
  }
  @override
  Widget build(BuildContext context) {
    double totalPrice = 0;
    for (int i = 0; i < cartItems.length; i++) {
      totalPrice += cartItems[i].price * cartItems[i].quantity;
    }
    return Column(
      children: [
        Text(widget.email ?? ''),

        Container(
          width: 360,
          height: 640,
          clipBehavior: Clip.antiAlias,
          decoration: BoxDecoration(color: Colors.white),
          child: Stack(
            children: [
              Positioned(
                left: 30,
                top: 37,
                child: SizedBox(
                  width: 252,
                  height: 70,
                  child: Text(
                    'Your Order',
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 32,
                      fontFamily: 'Aclonica',
                      fontWeight: FontWeight.w400,
                      height: 0,
                    ),
                  ),
                ),
              ),
              ListWheelScrollView(
                itemExtent: 160,
                physics: FixedExtentScrollPhysics(),

                children: [
                  for (int i = 0; i < cartItems.length; i++)
                    Container(
                      width: 324,
                      height: 135,
                      child: Stack(
                        children: [
                          Positioned(
                            left: 0,
                            top: 0,
                            child: Container(
                              width: 324,
                              height: 135,
                              decoration: ShapeDecoration(
                                color: Colors.white,
                                shape: RoundedRectangleBorder(
                                  side: BorderSide(width: 1),
                                  borderRadius: BorderRadius.circular(20),
                                ),
                              ),
                            ),
                          ),
                          Positioned(
                            left: 16,
                            top: 20,
                            child: Container(
                              width: 101,
                              height: 96,
                              decoration: BoxDecoration(
                                image: DecorationImage(
                                  image: NetworkImage(cartItems[i].image),
                                  fit: BoxFit.fill,
                                ),
                              ),
                            ),
                          ),
                          Positioned(
                            left: 150,
                            top: 10,
                            child: SizedBox(
                              width: 170,
                              height: 100,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    cartItems[i].name,
                                    style: TextStyle(
                                      color: Colors.black,
                                      fontSize: 20,
                                      fontFamily: 'Abril Fatface',
                                      fontWeight: FontWeight.w400,
                                    ),
                                  ),
                                  SizedBox(height: 5),
                                  Text(
                                    'Price: ${cartItems[i].price}',
                                    style: TextStyle(
                                      color: Colors.black,
                                      fontSize: 16,
                                      fontFamily: 'Abril Fatface',
                                      fontWeight: FontWeight.w400,
                                    ),
                                  ),
                                  SizedBox(height: 5),
                                  Text(
                                    'Quantity: ${cartItems[i].quantity}',
                                    style: TextStyle(
                                      color: Colors.black,
                                      fontSize: 16,
                                      fontFamily: 'Abril Fatface',
                                      fontWeight: FontWeight.w400,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          Positioned(
                            left: 150,
                            top: 100,
                            child: SizedBox(
                              width: 200.94,
                              height: 40.52,
                              child: Text(
                                'Total: ${cartItems[i].price * cartItems[i].quantity} DT',
                                style: TextStyle(
                                  color: Color(0xFFC9AA05),
                                  fontSize: 24,
                                  fontFamily: 'Abril Fatface',
                                  fontWeight: FontWeight.w400,
                                ),
                              ),
                            ),
                          ),
                          Positioned(
                            right: 5,
                            top: 5,
                            child: IconButton(
                              onPressed: () {
                                removeItem(i);
                              },
                              icon: Icon(
                                Icons.cancel,
                                color: Colors.red,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                ],
              ),
              Positioned(
                left: 12,
                bottom: 150,
                child: SizedBox(
                  width: 311,
                  height: 47,
                  child: Text(
                    'Total:                 ${totalPrice} DT',
                    style: TextStyle(
                      color: Colors.black,
                      backgroundColor: Colors.white,
                      fontSize: 32,
                      fontFamily: 'Aclonica',
                      fontWeight: FontWeight.w400,
                      height: 0,
                    ),
                  ),
                ),
              ),
              Positioned(
                left: 34,
                bottom: 80,
                child: GestureDetector(
                  onTap: () {
                    // Perform checkout action
                    confirmOrder();
                  },
                  child: Container(
                    width: 293,
                    height: 60,
                    decoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(
                          color: Color(0x3F000000),
                          blurRadius: 22,
                          offset: Offset(12, 10),
                          spreadRadius: 0,
                        )
                      ],
                    ),
                    child: Stack(
                      children: [
                        Positioned(
                          left: 0,
                          bottom: 0,
                          child: Container(
                            width: 293,
                            height: 60,
                            decoration: ShapeDecoration(
                              color: Color(0xFF5C42A8),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(20),
                              ),
                            ),
                            child: Center(
                              child: Text(
                                'Check out',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 32,
                                  fontFamily: 'Abhaya Libre ExtraBold',
                                  fontWeight: FontWeight.w800,
                                  height: 0,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              Positioned(
                left: 0,
                top: 569,
                child: Container(
                  width: 360,
                  height: 71,
                  decoration: ShapeDecoration(
                    color: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(20),
                        topRight: Radius.circular(20),
                      ),
                    ),
                  ),
                ),
              ),
              Positioned(
                left: 26,
                top: 578,
                child: GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => Menu(

                      )),
                    );
                  },
                child: Container(
                  width: 45,
                  height: 45,
                  clipBehavior: Clip.antiAlias,
                  decoration: BoxDecoration(),
                  child: Stack(
                    children: [
                      Center(
                        child: Icon(
                          Icons.home,
                          color: Colors.black,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              ),
              Positioned(
                left: 208,
                top: 578,
                child: GestureDetector(
                  onTap: () {
                    if (_auth.currentUser != null) {
                      // If user is logged in, navigate to the account page
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => AccountPage(
                          email: widget.email,
                          name: widget.name,
                          address: widget.address,
                          number: widget.number,)),
                      );
                    } else {
                      // If user is not logged in, navigate to the sign-in page
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => LoginPge()),
                      );
                    }
                  },
                child: Container(
                  width: 45,
                  height: 45,
                  clipBehavior: Clip.antiAlias,
                  decoration: BoxDecoration(),
                  child: Stack(
                    children: [
                      Center(
                        child: Icon(
                          Icons.account_circle,
                          color: Colors.black,
                        ),
                      ),
                    ],
                  ),
                ),
                ),
              ),
              Positioned(
                left: 296,
                top: 578,
                child: Container(
                  width: 45,
                  height: 45,
                  clipBehavior: Clip.antiAlias,
                  decoration: BoxDecoration(),
                  child: Stack(
                    children: [
                      Center(
                        child: Icon(
                          Icons.logout,
                          color: Colors.black,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Positioned(
                left: 116,
                top: 578,
                child: GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => FigmaToCodeApp()),
                    );
                  },
                  child: Container(
                    width: 45,
                    height: 45,
                    clipBehavior: Clip.antiAlias,
                    decoration: BoxDecoration(),
                    child: Stack(
                      children: [
                        Center(
                          child: Icon(
                            Icons.shopping_cart,
                            color: Colors.black,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
